package com.example.administrator.daiylywriting.BooksSqilte;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHARPTERS.
*/
public class CharptersDao extends AbstractDao<Charpters, Long> {

    public static final String TABLENAME = "CHARPTERS";

    /**
     * Properties of entity Charpters.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookKey = new Property(1, String.class, "BookKey", false, "BOOK_KEY");
        public final static Property CharpterName = new Property(2, String.class, "CharpterName", false, "CHARPTER_NAME");
        public final static Property CharpterKey = new Property(3, String.class, "CharpterKey", false, "CHARPTER_KEY");
        public final static Property CharpterVaules = new Property(4, String.class, "CharpterVaules", false, "CHARPTER_VAULES");
        public final static Property CreateTime = new Property(5, String.class, "CreateTime", false, "CREATE_TIME");
        public final static Property ChapterVauleNumbers = new Property(6, Integer.class, "ChapterVauleNumbers", false, "CHAPTER_VAULE_NUMBERS");
        public final static Property EditSpeed = new Property(7, Integer.class, "EditSpeed", false, "EDIT_SPEED");
        public final static Property IsDeleted = new Property(8, Boolean.class, "IsDeleted", false, "IS_DELETED");
    };


    public CharptersDao(DaoConfig config) {
        super(config);
    }
    
    public CharptersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHARPTERS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BOOK_KEY' TEXT NOT NULL ," + // 1: BookKey
                "'CHARPTER_NAME' TEXT NOT NULL ," + // 2: CharpterName
                "'CHARPTER_KEY' TEXT NOT NULL ," + // 3: CharpterKey
                "'CHARPTER_VAULES' TEXT," + // 4: CharpterVaules
                "'CREATE_TIME' TEXT," + // 5: CreateTime
                "'CHAPTER_VAULE_NUMBERS' INTEGER," + // 6: ChapterVauleNumbers
                "'EDIT_SPEED' INTEGER," + // 7: EditSpeed
                "'IS_DELETED' INTEGER);"); // 8: IsDeleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHARPTERS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Charpters entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBookKey());
        stmt.bindString(3, entity.getCharpterName());
        stmt.bindString(4, entity.getCharpterKey());
 
        String CharpterVaules = entity.getCharpterVaules();
        if (CharpterVaules != null) {
            stmt.bindString(5, CharpterVaules);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(6, CreateTime);
        }
 
        Integer ChapterVauleNumbers = entity.getChapterVauleNumbers();
        if (ChapterVauleNumbers != null) {
            stmt.bindLong(7, ChapterVauleNumbers);
        }
 
        Integer EditSpeed = entity.getEditSpeed();
        if (EditSpeed != null) {
            stmt.bindLong(8, EditSpeed);
        }
 
        Boolean IsDeleted = entity.getIsDeleted();
        if (IsDeleted != null) {
            stmt.bindLong(9, IsDeleted ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Charpters readEntity(Cursor cursor, int offset) {
        Charpters entity = new Charpters( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // BookKey
            cursor.getString(offset + 2), // CharpterName
            cursor.getString(offset + 3), // CharpterKey
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CharpterVaules
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CreateTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // ChapterVauleNumbers
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // EditSpeed
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0 // IsDeleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Charpters entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookKey(cursor.getString(offset + 1));
        entity.setCharpterName(cursor.getString(offset + 2));
        entity.setCharpterKey(cursor.getString(offset + 3));
        entity.setCharpterVaules(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChapterVauleNumbers(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setEditSpeed(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsDeleted(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Charpters entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Charpters entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
