package com.example.administrator.daiylywriting.BooksSqilte;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WEB_DATA.
*/
public class WebDataDao extends AbstractDao<WebData, Long> {

    public static final String TABLENAME = "WEB_DATA";

    /**
     * Properties of entity WebData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ClickNumber = new Property(1, Integer.class, "ClickNumber", false, "CLICK_NUMBER");
        public final static Property LikeNumber = new Property(2, Integer.class, "LikeNumber", false, "LIKE_NUMBER");
        public final static Property BookName = new Property(3, String.class, "BookName", false, "BOOK_NAME");
        public final static Property TimeDate = new Property(4, String.class, "TimeDate", false, "TIME_DATE");
        public final static Property TimeDay = new Property(5, String.class, "TimeDay", false, "TIME_DAY");
        public final static Property TimeHour = new Property(6, Integer.class, "TimeHour", false, "TIME_HOUR");
    };


    public WebDataDao(DaoConfig config) {
        super(config);
    }
    
    public WebDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WEB_DATA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CLICK_NUMBER' INTEGER," + // 1: ClickNumber
                "'LIKE_NUMBER' INTEGER," + // 2: LikeNumber
                "'BOOK_NAME' TEXT," + // 3: BookName
                "'TIME_DATE' TEXT," + // 4: TimeDate
                "'TIME_DAY' TEXT," + // 5: TimeDay
                "'TIME_HOUR' INTEGER);"); // 6: TimeHour
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WEB_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WebData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer ClickNumber = entity.getClickNumber();
        if (ClickNumber != null) {
            stmt.bindLong(2, ClickNumber);
        }
 
        Integer LikeNumber = entity.getLikeNumber();
        if (LikeNumber != null) {
            stmt.bindLong(3, LikeNumber);
        }
 
        String BookName = entity.getBookName();
        if (BookName != null) {
            stmt.bindString(4, BookName);
        }
 
        String TimeDate = entity.getTimeDate();
        if (TimeDate != null) {
            stmt.bindString(5, TimeDate);
        }
 
        String TimeDay = entity.getTimeDay();
        if (TimeDay != null) {
            stmt.bindString(6, TimeDay);
        }
 
        Integer TimeHour = entity.getTimeHour();
        if (TimeHour != null) {
            stmt.bindLong(7, TimeHour);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WebData readEntity(Cursor cursor, int offset) {
        WebData entity = new WebData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ClickNumber
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // LikeNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // BookName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // TimeDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // TimeDay
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // TimeHour
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WebData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClickNumber(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setLikeNumber(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBookName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimeDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimeDay(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimeHour(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WebData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WebData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
