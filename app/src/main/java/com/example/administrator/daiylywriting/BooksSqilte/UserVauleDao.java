package com.example.administrator.daiylywriting.BooksSqilte;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_VAULE.
*/
public class UserVauleDao extends AbstractDao<UserVaule, Long> {

    public static final String TABLENAME = "USER_VAULE";

    /**
     * Properties of entity UserVaule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Exp = new Property(1, Integer.class, "Exp", false, "EXP");
        public final static Property UserImage = new Property(2, byte[].class, "UserImage", false, "USER_IMAGE");
        public final static Property CreateTime = new Property(3, String.class, "CreateTime", false, "CREATE_TIME");
        public final static Property UserName = new Property(4, String.class, "UserName", false, "USER_NAME");
    };


    public UserVauleDao(DaoConfig config) {
        super(config);
    }
    
    public UserVauleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_VAULE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'EXP' INTEGER," + // 1: Exp
                "'USER_IMAGE' BLOB," + // 2: UserImage
                "'CREATE_TIME' TEXT," + // 3: CreateTime
                "'USER_NAME' TEXT);"); // 4: UserName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_VAULE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserVaule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer Exp = entity.getExp();
        if (Exp != null) {
            stmt.bindLong(2, Exp);
        }
 
        byte[] UserImage = entity.getUserImage();
        if (UserImage != null) {
            stmt.bindBlob(3, UserImage);
        }
 
        String CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindString(4, CreateTime);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(5, UserName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserVaule readEntity(Cursor cursor, int offset) {
        UserVaule entity = new UserVaule( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // Exp
            cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2), // UserImage
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CreateTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // UserName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserVaule entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExp(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUserImage(cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserVaule entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserVaule entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
