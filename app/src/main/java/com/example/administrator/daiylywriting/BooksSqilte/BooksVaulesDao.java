package com.example.administrator.daiylywriting.BooksSqilte;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOOKS_VAULES.
*/
public class BooksVaulesDao extends AbstractDao<BooksVaules, Long> {

    public static final String TABLENAME = "BOOKS_VAULES";

    /**
     * Properties of entity BooksVaules.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookName = new Property(1, String.class, "BookName", false, "BOOK_NAME");
        public final static Property IsDeleted = new Property(2, Boolean.class, "IsDeleted", false, "IS_DELETED");
        public final static Property BookKey = new Property(3, String.class, "BookKey", false, "BOOK_KEY");
        public final static Property BookModel = new Property(4, String.class, "BookModel", false, "BOOK_MODEL");
        public final static Property BookCharpterNumbers = new Property(5, Integer.class, "BookCharpterNumbers", false, "BOOK_CHARPTER_NUMBERS");
        public final static Property BookVauleNumbers = new Property(6, Integer.class, "BookVauleNumbers", false, "BOOK_VAULE_NUMBERS");
    };


    public BooksVaulesDao(DaoConfig config) {
        super(config);
    }
    
    public BooksVaulesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOOKS_VAULES' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BOOK_NAME' TEXT," + // 1: BookName
                "'IS_DELETED' INTEGER," + // 2: IsDeleted
                "'BOOK_KEY' TEXT NOT NULL ," + // 3: BookKey
                "'BOOK_MODEL' TEXT," + // 4: BookModel
                "'BOOK_CHARPTER_NUMBERS' INTEGER," + // 5: BookCharpterNumbers
                "'BOOK_VAULE_NUMBERS' INTEGER);"); // 6: BookVauleNumbers
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOOKS_VAULES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BooksVaules entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String BookName = entity.getBookName();
        if (BookName != null) {
            stmt.bindString(2, BookName);
        }
 
        Boolean IsDeleted = entity.getIsDeleted();
        if (IsDeleted != null) {
            stmt.bindLong(3, IsDeleted ? 1l: 0l);
        }
        stmt.bindString(4, entity.getBookKey());
 
        String BookModel = entity.getBookModel();
        if (BookModel != null) {
            stmt.bindString(5, BookModel);
        }
 
        Integer BookCharpterNumbers = entity.getBookCharpterNumbers();
        if (BookCharpterNumbers != null) {
            stmt.bindLong(6, BookCharpterNumbers);
        }
 
        Integer BookVauleNumbers = entity.getBookVauleNumbers();
        if (BookVauleNumbers != null) {
            stmt.bindLong(7, BookVauleNumbers);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BooksVaules readEntity(Cursor cursor, int offset) {
        BooksVaules entity = new BooksVaules( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // BookName
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // IsDeleted
            cursor.getString(offset + 3), // BookKey
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // BookModel
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // BookCharpterNumbers
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // BookVauleNumbers
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BooksVaules entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsDeleted(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setBookKey(cursor.getString(offset + 3));
        entity.setBookModel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBookCharpterNumbers(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setBookVauleNumbers(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BooksVaules entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BooksVaules entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
